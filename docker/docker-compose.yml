services:
  db:
    container_name: posgresql-15
    image: postgres:15-alpine
    restart: always
    # Optional: Map the container port to a host port to be able to connect with a local db client
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./db/psql-init/db.sql:/docker-entrypoint-initdb.d/db.sql
      - postgres_data:/var/lib/postgresql/data/

  broker:
    container_name: redis
    image: redis:7.2.4-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  app:
    container_name: web-app
    build:
      context: ../
      dockerfile: ./docker/app/Dockerfile
      target: dev
    restart: always
    depends_on:
      - db
      - broker

    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ../:/home/web/code
    ports:
      - 8000:8000

volumes:
  postgres_data:






  # web:
  #   restart: always
  #   build: .
  #   command: python manage.py runserver 0.0.0.0:8000
  #   container_name: django-dockerize
  #   # environment:
  #     # - DATABASE_URL
  #   volumes:
  #     - .:/app
  #   ports:
  #     - 8000:8000
